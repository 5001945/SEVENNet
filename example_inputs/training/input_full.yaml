# Example input.yaml for training SEVENNet.
# The underlying model is identical to nequip (https://github.com/mir-group/nequip), but the names of hyperparameters might differ.3
# Except channel, lmax and num_convolution_layer, which has minimal values to quickly check the installation, they normally works well with values written here.
# Defaults that works well of channel, lmax and num_convolution_layer are 32, 3, 3 respectively.

model:
    chemical_species: 'Auto'                      # Chemical symbols present in the dataset, guess from load_dataset data if 'auto'
    cutoff: 4.0                                   # Cutoff radius in Angstroms. If two atoms are within the cutoff, they are connected.
    channel: 4                                    # Equivalent to 'num_features' in nequip. Represents the multiplicity of node features. 32 is recomanded as default.
    lmax: 2                                       # Maximum order of irreps (rotation order). 3 is recomanded as default
    num_convolution_layer: 1                      # Equivalent to 'num_layers' in nequip. Represents the number of message passing layers in the model. 3 is recomanded as default

    weight_nn_hidden_neurons: [64, 64]            # Equivalent to 'invariant_layers' and 'neurons' in nequip. Represents the neural network for the radial basis
    radial_basis:                                 # Function and its parameters to encode radial distance
        radial_basis_name: 'bessel'               # Only 'bessel' is currently supported
        bessel_basis_num: 8                       # Equivalent to 'num_basis' in nequip. Represents the number of Bessel functions as the radial basis
    cutoff_function:                              # Differentiable, decaying function to encode radial distance
        cutoff_function_name: 'poly_cut'          # Only 'poly_cut' is currently supported
        poly_cut_p_value: 6                       # Equivalent to 'PolynomialCutoff_p' in nequip. Smaller p values correspond to a stronger decay with distance 

    # For even nonlinearities, 'silu', 'abs' (absolute), and 'ssp' (shifted softmax) are supported. Defaults generally work well
    act_gate: {'e': 'silu', 'o': 'tanh'}          # Equivalent to 'nonlinearity_gates' in nequip.
    act_scalar: {'e': 'silu', 'o': 'tanh'}        # Equivalent to 'nonlinearity_scalars' in nequip.

    is_parity: True                               # Use parity in representations

    avg_num_neigh       : True                    # Normalize the aggregation of messages by the average number of neighbors calculated from the training set
    train_shift_scale   : False                   # Enable training for shift & scale. Useful if the dataset is augmented
    train_avg_num_neigh : False                   # Enable training for avg_num_neigh. Useful if the dataset is augmented
    use_bias_in_linear: False                     # Use bias in scalar e3nn networks
    optimize_by_reduce: False                     # Optimize by eliminating non-scalar computations at the last layer
                                                                  
train:
    random_seed: 1                                # Random seed to pytorch
    is_train_stress     : False                   # Includes stress in the loss function
    epoch: 10                                     # Ends training after this number of epochs

    # Each optimizer and scheduler have different available parameters. 
    # As the documentation is still under preparation, you can refer to sevenn/train/optim.py if needed
    optimizer: 'adam'                             # Options available are 'sgd', 'adagrad', 'adam', 'adamw', 'radam'
    optim_param:                                  
        lr: 0.005
    scheduler: 'exponentiallr'                    # Options available are 'steplr', 'multisteplr', 'exponentiallr', 'cosineannealinglr'
    scheduler_param:
        gamma: 0.99

    force_loss_weight   : 0.1                     # Coefficient for force loss
    stress_loss_weight  : 1e-06                   # Coefficient for stress loss

    per_epoch: 5                                  # Generate checkpoints every this ratio

    # WARNING: Seperate the training with previous dir. It will overwrite checkpoints
    # continue: 
    #    reset_optimizer: False 
    #    reset_scheduler: False 
    #    checkpoint: 'path_to_previous_checkpoint/checkpoint_best.pth'

data:
    batch_size: 2                                 # Batch size. If training fails due to memory shortage, lower this value
    data_divide_ratio: 0.1                        # Divide the whole dataset into training and validation sets by this ratio

    #shift: 0.0                                   # User defined global shift
    #scale: 1.0                                   # User defined global scale

    # Use element wise shift, scale (also trainable).
    # The starting values are linear fitted element reference atomic energy and element wise force rms
    use_species_wise_shift_scale: False           

    # These sevenn_data can be created via 'sevenn_graph_build' command line tool or by training

    data_format: 'ase'                           # Default is 'structure_list'
    data_format_args:                            # Paramaters will be passed to ase.io.read
        index: '-10:'

    # .sevenn_data can be loaded regardless of data_foramt (since they're already graph)
    # knows wild card *
    # ASE tries to infer its type by extension, in this case, extxyz file is loaded by ase.
    load_dataset_path: ['./train.sevenn_data', '../data/test.extxyz']   # Total dataset if load_validset is not speified, else training set
    load_validset_path: ['./valid.sevenn_data']  # User defined validation set, ignores data_divided_ratio if specified

    #save_dataset_path: 'total'                   # Save the preprocessed (in load_dataset_path) dataset
    save_by_train_valid: True                     # Save the preprocessed train.sevenn_data, valid.sevenn_data
    save_by_label: False                          # Save the dataset by labels specified in the structure_list

